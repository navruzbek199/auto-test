import { relative } from 'node:path';
import { fileURLToPath, pathToFileURL } from 'url';
import { defineNuxtModule, createResolver, addTemplate, addPlugin, addImports, addServerHandler } from '@nuxt/kit';
import fg from 'fast-glob';
import { Server } from 'socket.io';

const module = defineNuxtModule({
  meta: {
    name: "nuxt3-socket.io",
    configKey: "socket"
  },
  defaults: {
    addPlugin: true,
    serverOptions: {}
  },
  async setup(options, nuxt) {
    const { resolve: resolve2 } = createResolver(import.meta.url);
    const extGlob = "**/*.{ts,js,mjs}";
    const files = [];
    const runtimeDir = fileURLToPath(new URL("./runtime", import.meta.url));
    nuxt.options.build.transpile.push(runtimeDir);
    nuxt.hook("builder:watch", async (e, path) => {
      path = relative(nuxt.options.serverDir, resolve2(nuxt.options.serverDir, path));
      const isSocketDir = /^server[\/\\]socket/.test(path);
      if (!isSocketDir || e === "change") {
        return;
      }
      await scanHandlers();
      await nuxt.callHook("builder:generateApp");
    });
    await scanHandlers();
    addTemplate({
      filename: "io-dev-functions.mjs",
      write: true,
      getContents() {
        return `
          import jiti from 'jiti';
          const _require = jiti(process.cwd(), { interopDefault: true, esmResolve: true });

          ${files.map((file, index) => `const function${index} = _require('${file.replace(".ts", "")}');`).join("\n")}
          export {
            ${files.map((_, index) => `function${index}`).join(",\n")}
          }
        `;
      }
    });
    if (nuxt.options.dev) {
      const devFunctionsPath = pathToFileURL(resolve2(nuxt.options.buildDir, "io-dev-functions.mjs")).toString();
      nuxt.hook("listen", (httpServer) => {
        nuxt.hook("app:templatesGenerated", async () => {
          const io = new Server(httpServer, options.serverOptions);
          const functions = await import(devFunctionsPath);
          Object.keys(functions).forEach((fn) => {
            functions[fn](io);
          });
        });
      });
    }
    if (options.addPlugin) {
      addPlugin(resolve2(runtimeDir, "plugin.client"));
      addImports([
        {
          name: "useSocket",
          from: resolve2(runtimeDir, "composables")
        },
        {
          name: "useIO",
          from: resolve2(runtimeDir, "composables")
        }
      ]);
    }
    addServerHandler({
      middleware: true,
      handler: resolve2(nuxt.options.buildDir, "io-handler.ts")
    });
    addTemplate({
      filename: "io-handler.ts",
      write: true,
      getContents() {
        return `
          import { createIOHandler } from '${resolve2(runtimeDir, "server")}';
          

// -- Unbuild CommonJS Shims --
import __cjs_url__ from 'url';
import __cjs_path__ from 'path';
import __cjs_mod__ from 'module';
const __filename = __cjs_url__.fileURLToPath(import.meta.url);
const __dirname = __cjs_path__.dirname(__filename);
const require = __cjs_mod__.createRequire(import.meta.url);
${files.map((file, index) => `import function${index} from '${file.replace(".ts", "")}'`).join("\n")}
          export default createIOHandler({
            ${files.map((_, index) => `function${index}`).join(",\n")}
          }, ${JSON.stringify(options.serverOptions)})
        `;
      }
    });
    async function scanHandlers() {
      files.length = 0;
      const updatedFiles = await fg(extGlob, {
        cwd: resolve2(nuxt.options.serverDir, "socket"),
        absolute: true,
        onlyFiles: true
      });
      files.push(...new Set(updatedFiles));
      return files;
    }
  }
});

export { module as default };
